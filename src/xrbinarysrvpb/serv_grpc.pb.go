// ----------------------------------------------------------------------------
// xr_debug_data.proto - XR debug data protobuf definitions
// Arpil 2024,Copyright (c) 2016 by Cisco Systems, Inc.
// ----------------------------------------------------------------------------

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.0
// source: src/xrbinarysrvpb/serv.proto

package xrbinarysrvpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LtraceUploadService_LongUploadRequest_FullMethodName = "/xrbinaryserv.LtraceUploadService/LongUploadRequest"
)

// LtraceUploadServiceClient is the client API for LtraceUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LtraceUploadServiceClient interface {
	// client side streaming supported.
	LongUploadRequest(ctx context.Context, opts ...grpc.CallOption) (LtraceUploadService_LongUploadRequestClient, error)
}

type ltraceUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLtraceUploadServiceClient(cc grpc.ClientConnInterface) LtraceUploadServiceClient {
	return &ltraceUploadServiceClient{cc}
}

func (c *ltraceUploadServiceClient) LongUploadRequest(ctx context.Context, opts ...grpc.CallOption) (LtraceUploadService_LongUploadRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &LtraceUploadService_ServiceDesc.Streams[0], LtraceUploadService_LongUploadRequest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ltraceUploadServiceLongUploadRequestClient{stream}
	return x, nil
}

type LtraceUploadService_LongUploadRequestClient interface {
	Send(*XrDebugRequest) error
	CloseAndRecv() (*XrDebugResponse, error)
	grpc.ClientStream
}

type ltraceUploadServiceLongUploadRequestClient struct {
	grpc.ClientStream
}

func (x *ltraceUploadServiceLongUploadRequestClient) Send(m *XrDebugRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ltraceUploadServiceLongUploadRequestClient) CloseAndRecv() (*XrDebugResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(XrDebugResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LtraceUploadServiceServer is the server API for LtraceUploadService service.
// All implementations must embed UnimplementedLtraceUploadServiceServer
// for forward compatibility
type LtraceUploadServiceServer interface {
	// client side streaming supported.
	LongUploadRequest(LtraceUploadService_LongUploadRequestServer) error
	mustEmbedUnimplementedLtraceUploadServiceServer()
}

// UnimplementedLtraceUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLtraceUploadServiceServer struct {
}

func (UnimplementedLtraceUploadServiceServer) LongUploadRequest(LtraceUploadService_LongUploadRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method LongUploadRequest not implemented")
}
func (UnimplementedLtraceUploadServiceServer) mustEmbedUnimplementedLtraceUploadServiceServer() {}

// UnsafeLtraceUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LtraceUploadServiceServer will
// result in compilation errors.
type UnsafeLtraceUploadServiceServer interface {
	mustEmbedUnimplementedLtraceUploadServiceServer()
}

func RegisterLtraceUploadServiceServer(s grpc.ServiceRegistrar, srv LtraceUploadServiceServer) {
	s.RegisterService(&LtraceUploadService_ServiceDesc, srv)
}

func _LtraceUploadService_LongUploadRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LtraceUploadServiceServer).LongUploadRequest(&ltraceUploadServiceLongUploadRequestServer{stream})
}

type LtraceUploadService_LongUploadRequestServer interface {
	SendAndClose(*XrDebugResponse) error
	Recv() (*XrDebugRequest, error)
	grpc.ServerStream
}

type ltraceUploadServiceLongUploadRequestServer struct {
	grpc.ServerStream
}

func (x *ltraceUploadServiceLongUploadRequestServer) SendAndClose(m *XrDebugResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ltraceUploadServiceLongUploadRequestServer) Recv() (*XrDebugRequest, error) {
	m := new(XrDebugRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LtraceUploadService_ServiceDesc is the grpc.ServiceDesc for LtraceUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LtraceUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xrbinaryserv.LtraceUploadService",
	HandlerType: (*LtraceUploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LongUploadRequest",
			Handler:       _LtraceUploadService_LongUploadRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/xrbinarysrvpb/serv.proto",
}
