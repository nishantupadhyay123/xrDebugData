// ----------------------------------------------------------------------------
// xr_debug_data.proto - XR debug data protobuf definitions
// Arpil 2024,Copyright (c) 2016 by Cisco Systems, Inc.
// ----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: src/xrbinarypb/data.proto

package xrbinarypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All enums must have a default
type XrDebugDataMessageType int32

const (
	XrDebugData_UNSPECIFIED XrDebugDataMessageType = 0
	XrDebugData_LTRACE      XrDebugDataMessageType = 1
	XrDebugData_SYSLOG      XrDebugDataMessageType = 2
	XrDebugData_SHOWTECH    XrDebugDataMessageType = 3
	XrDebugData_SNAPSHOT    XrDebugDataMessageType = 4
)

// Enum value maps for XrDebugDataMessageType.
var (
	XrDebugDataMessageType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LTRACE",
		2: "SYSLOG",
		3: "SHOWTECH",
		4: "SNAPSHOT",
	}
	XrDebugDataMessageType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"LTRACE":      1,
		"SYSLOG":      2,
		"SHOWTECH":    3,
		"SNAPSHOT":    4,
	}
)

func (x XrDebugDataMessageType) Enum() *XrDebugDataMessageType {
	p := new(XrDebugDataMessageType)
	*p = x
	return p
}

func (x XrDebugDataMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XrDebugDataMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_xrbinarypb_data_proto_enumTypes[0].Descriptor()
}

func (XrDebugDataMessageType) Type() protoreflect.EnumType {
	return &file_src_xrbinarypb_data_proto_enumTypes[0]
}

func (x XrDebugDataMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XrDebugDataMessageType.Descriptor instead.
func (XrDebugDataMessageType) EnumDescriptor() ([]byte, []int) {
	return file_src_xrbinarypb_data_proto_rawDescGZIP(), []int{0, 0}
}

type XrDebugData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HostId:
	//
	//	*XrDebugData_HostName
	//	*XrDebugData_HostUuid
	HostId isXrDebugData_HostId `protobuf_oneof:"host_id"`
	// Any identifier used by ios-xr to indicate that it is part of any particular config ,
	// partiuclar test or any other paramater deemed necessary by ios-xr system
	StreamId string `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Message type is defined as the data for which different decoding mechansim
	// can be applied at client
	MsgType  XrDebugDataMessageType `protobuf:"varint,4,opt,name=msg_type,json=msgType,proto3,enum=xrbinary.XrDebugDataMessageType" json:"msg_type,omitempty"`
	Ltrace   *XrLtrace              `protobuf:"bytes,5,opt,name=ltrace,proto3" json:"ltrace,omitempty"`
	Snapshot *XrSnapshot            `protobuf:"bytes,6,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *XrDebugData) Reset() {
	*x = XrDebugData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_xrbinarypb_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XrDebugData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrDebugData) ProtoMessage() {}

func (x *XrDebugData) ProtoReflect() protoreflect.Message {
	mi := &file_src_xrbinarypb_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrDebugData.ProtoReflect.Descriptor instead.
func (*XrDebugData) Descriptor() ([]byte, []int) {
	return file_src_xrbinarypb_data_proto_rawDescGZIP(), []int{0}
}

func (m *XrDebugData) GetHostId() isXrDebugData_HostId {
	if m != nil {
		return m.HostId
	}
	return nil
}

func (x *XrDebugData) GetHostName() string {
	if x, ok := x.GetHostId().(*XrDebugData_HostName); ok {
		return x.HostName
	}
	return ""
}

func (x *XrDebugData) GetHostUuid() string {
	if x, ok := x.GetHostId().(*XrDebugData_HostUuid); ok {
		return x.HostUuid
	}
	return ""
}

func (x *XrDebugData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *XrDebugData) GetMsgType() XrDebugDataMessageType {
	if x != nil {
		return x.MsgType
	}
	return XrDebugData_UNSPECIFIED
}

func (x *XrDebugData) GetLtrace() *XrLtrace {
	if x != nil {
		return x.Ltrace
	}
	return nil
}

func (x *XrDebugData) GetSnapshot() *XrSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type isXrDebugData_HostId interface {
	isXrDebugData_HostId()
}

type XrDebugData_HostName struct {
	// host_name : ios-xr hostname.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3,oneof"`
}

type XrDebugData_HostUuid struct {
	// host_uuid : mostly use ethernet mac_address + any other parameter used to create UUID.
	HostUuid string `protobuf:"bytes,2,opt,name=host_uuid,json=hostUuid,proto3,oneof"` //Add  string rp_mac_address = 3;   //rp ethernet mac address/
}

func (*XrDebugData_HostName) isXrDebugData_HostId() {}

func (*XrDebugData_HostUuid) isXrDebugData_HostId() {}

type XrLtrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RP or LC name or RP and LC nodeid within the system
	//
	// Types that are assignable to Node:
	//
	//	*XrLtrace_NodeName
	//	*XrLtrace_NodeId
	Node   isXrLtrace_Node `protobuf_oneof:"node"`
	Ltrace []*ProcessTrace `protobuf:"bytes,3,rep,name=ltrace,proto3" json:"ltrace,omitempty"`
}

func (x *XrLtrace) Reset() {
	*x = XrLtrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_xrbinarypb_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XrLtrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrLtrace) ProtoMessage() {}

func (x *XrLtrace) ProtoReflect() protoreflect.Message {
	mi := &file_src_xrbinarypb_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrLtrace.ProtoReflect.Descriptor instead.
func (*XrLtrace) Descriptor() ([]byte, []int) {
	return file_src_xrbinarypb_data_proto_rawDescGZIP(), []int{1}
}

func (m *XrLtrace) GetNode() isXrLtrace_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *XrLtrace) GetNodeName() string {
	if x, ok := x.GetNode().(*XrLtrace_NodeName); ok {
		return x.NodeName
	}
	return ""
}

func (x *XrLtrace) GetNodeId() int32 {
	if x, ok := x.GetNode().(*XrLtrace_NodeId); ok {
		return x.NodeId
	}
	return 0
}

func (x *XrLtrace) GetLtrace() []*ProcessTrace {
	if x != nil {
		return x.Ltrace
	}
	return nil
}

type isXrLtrace_Node interface {
	isXrLtrace_Node()
}

type XrLtrace_NodeName struct {
	// decoded string name of the node.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3,oneof"`
}

type XrLtrace_NodeId struct {
	// xr internal node_id
	NodeId int32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3,oneof"`
}

func (*XrLtrace_NodeName) isXrLtrace_Node() {}

func (*XrLtrace_NodeId) isXrLtrace_Node() {}

type ProcessTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// provide event_type as seperate optional field
	EventType string `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// provides data in string or bytes format
	//
	// Types that are assignable to Data:
	//
	//	*ProcessTrace_MsgData
	//	*ProcessTrace_Msg
	Data isProcessTrace_Data `protobuf_oneof:"data"`
}

func (x *ProcessTrace) Reset() {
	*x = ProcessTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_xrbinarypb_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTrace) ProtoMessage() {}

func (x *ProcessTrace) ProtoReflect() protoreflect.Message {
	mi := &file_src_xrbinarypb_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTrace.ProtoReflect.Descriptor instead.
func (*ProcessTrace) Descriptor() ([]byte, []int) {
	return file_src_xrbinarypb_data_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessTrace) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (m *ProcessTrace) GetData() isProcessTrace_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ProcessTrace) GetMsgData() []byte {
	if x, ok := x.GetData().(*ProcessTrace_MsgData); ok {
		return x.MsgData
	}
	return nil
}

func (x *ProcessTrace) GetMsg() string {
	if x, ok := x.GetData().(*ProcessTrace_Msg); ok {
		return x.Msg
	}
	return ""
}

type isProcessTrace_Data interface {
	isProcessTrace_Data()
}

type ProcessTrace_MsgData struct {
	MsgData []byte `protobuf:"bytes,2,opt,name=msg_data,json=msgData,proto3,oneof"`
}

type ProcessTrace_Msg struct {
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3,oneof"`
}

func (*ProcessTrace_MsgData) isProcessTrace_Data() {}

func (*ProcessTrace_Msg) isProcessTrace_Data() {}

type XrSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *XrSnapshot) Reset() {
	*x = XrSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_xrbinarypb_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XrSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrSnapshot) ProtoMessage() {}

func (x *XrSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_src_xrbinarypb_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrSnapshot.ProtoReflect.Descriptor instead.
func (*XrSnapshot) Descriptor() ([]byte, []int) {
	return file_src_xrbinarypb_data_proto_rawDescGZIP(), []int{3}
}

func (x *XrSnapshot) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_src_xrbinarypb_data_proto protoreflect.FileDescriptor

var file_src_xrbinarypb_data_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x72, 0x63, 0x2f, 0x78, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x62,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x78, 0x72, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xe5, 0x02, 0x0a, 0x0b, 0x58, 0x72, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x78, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x58, 0x72,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x6c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x78, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x58, 0x72, 0x4c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x78, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x58, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x53, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x4f, 0x57, 0x54, 0x45,
	0x43, 0x48, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x7c, 0x0a,
	0x08, 0x58, 0x72, 0x4c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x0a, 0x58, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2e, 0x2f, 0x73, 0x72, 0x63, 0x2f,
	0x78, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_src_xrbinarypb_data_proto_rawDescOnce sync.Once
	file_src_xrbinarypb_data_proto_rawDescData = file_src_xrbinarypb_data_proto_rawDesc
)

func file_src_xrbinarypb_data_proto_rawDescGZIP() []byte {
	file_src_xrbinarypb_data_proto_rawDescOnce.Do(func() {
		file_src_xrbinarypb_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_xrbinarypb_data_proto_rawDescData)
	})
	return file_src_xrbinarypb_data_proto_rawDescData
}

var file_src_xrbinarypb_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_src_xrbinarypb_data_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_src_xrbinarypb_data_proto_goTypes = []interface{}{
	(XrDebugDataMessageType)(0), // 0: xrbinary.XrDebugData.message_type
	(*XrDebugData)(nil),         // 1: xrbinary.XrDebugData
	(*XrLtrace)(nil),            // 2: xrbinary.XrLtrace
	(*ProcessTrace)(nil),        // 3: xrbinary.ProcessTrace
	(*XrSnapshot)(nil),          // 4: xrbinary.XrSnapshot
}
var file_src_xrbinarypb_data_proto_depIdxs = []int32{
	0, // 0: xrbinary.XrDebugData.msg_type:type_name -> xrbinary.XrDebugData.message_type
	2, // 1: xrbinary.XrDebugData.ltrace:type_name -> xrbinary.XrLtrace
	4, // 2: xrbinary.XrDebugData.snapshot:type_name -> xrbinary.XrSnapshot
	3, // 3: xrbinary.XrLtrace.ltrace:type_name -> xrbinary.ProcessTrace
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_src_xrbinarypb_data_proto_init() }
func file_src_xrbinarypb_data_proto_init() {
	if File_src_xrbinarypb_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_xrbinarypb_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XrDebugData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_xrbinarypb_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XrLtrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_xrbinarypb_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_xrbinarypb_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XrSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_xrbinarypb_data_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*XrDebugData_HostName)(nil),
		(*XrDebugData_HostUuid)(nil),
	}
	file_src_xrbinarypb_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*XrLtrace_NodeName)(nil),
		(*XrLtrace_NodeId)(nil),
	}
	file_src_xrbinarypb_data_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProcessTrace_MsgData)(nil),
		(*ProcessTrace_Msg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_xrbinarypb_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_xrbinarypb_data_proto_goTypes,
		DependencyIndexes: file_src_xrbinarypb_data_proto_depIdxs,
		EnumInfos:         file_src_xrbinarypb_data_proto_enumTypes,
		MessageInfos:      file_src_xrbinarypb_data_proto_msgTypes,
	}.Build()
	File_src_xrbinarypb_data_proto = out.File
	file_src_xrbinarypb_data_proto_rawDesc = nil
	file_src_xrbinarypb_data_proto_goTypes = nil
	file_src_xrbinarypb_data_proto_depIdxs = nil
}
